%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Haxe
file_extensions:
  - hx
  - dump
scope: source.hx
contexts:
  main:
    - include: all
  abstract:
    - match: '(?=abstract\s+[A-Z])'
      push:
        - meta_scope: meta.abstract.hx
        - match: '(?<=\})|(;)'
          captures:
            1: punctuation.terminator.hx
          pop: true
        - include: abstract-name
        - include: abstract-name-post
        - include: abstract-block
  abstract-block:
    - match: '(?<=\{)'
      push:
        - meta_scope: meta.block.hx
        - match: '(\})'
          captures:
            1: punctuation.definition.block.end.hx
          pop: true
        - include: method
        - include: modifiers
        - include: variable
        - include: block
        - include: block-contents
  abstract-name:
    - match: \b(abstract)\b
      captures:
        1: storage.type.class.hx
      push:
        - match: '([_A-Za-z]\w*)'
          captures:
            1: entity.name.type.class.hx
          pop: true
        - include: global
  abstract-name-post:
    - match: (?<=\w)
      push:
        - match: '([\{;])'
          captures:
            1: punctuation.definition.block.begin.hx
          pop: true
        - include: global
        - match: \b(from|to)\b
          scope: keyword.other.hx
        - include: type
        - match: '[\(\)]'
          scope: punctuation.definition.other.hx
  accessor-method:
    - match: '\b(get|set)_[_A-Za-z]\w*\b'
      scope: entity.name.function.hx
  all:
    - include: global
    - include: package
    - include: import
    - include: using
    - match: \b(final)\b(?=\s+(class|interface|extern|private))
      scope: storage.modifier.hx
    - include: abstract
    - include: class
    - include: enum
    - include: interface
    - include: typedef
    - include: block
    - include: block-contents
  array:
    - match: '\['
      captures:
        0: punctuation.definition.array.begin.hx
      push:
        - meta_scope: meta.array.literal.hx
        - match: '\]'
          captures:
            0: punctuation.definition.array.end.hx
          pop: true
        - include: block
        - include: block-contents
  arrow-function:
    - match: '(\()(?=[^(]*?\)\s*->)'
      captures:
        1: punctuation.definition.parameters.begin.hx
      push:
        - meta_scope: meta.method.arrow.hx
        - match: (\))\s*(->)
          captures:
            1: punctuation.definition.parameters.end.hx
            2: storage.type.function.arrow.hx
          pop: true
        - include: arrow-function-parameter
  arrow-function-parameter:
    - match: (?<=\(|,)
      push:
        - match: (?=\)|,)
          pop: true
        - include: parameter-name
        - include: arrow-function-parameter-type-hint
        - include: parameter-assign
        - include: punctuation-comma
        - include: global
  arrow-function-parameter-type-hint:
    - match: ":"
      captures:
        0: keyword.operator.type.annotation.hx
      push:
        - match: (?=\)|,|=)
          pop: true
        - include: type
  block:
    - match: '\{'
      captures:
        0: punctuation.definition.block.begin.hx
      push:
        - match: '\}'
          captures:
            0: punctuation.definition.block.end.hx
          pop: true
        - include: block
        - include: block-contents
  block-contents:
    - include: global
    - include: regex
    - include: array
    - include: constants
    - include: strings
    - include: metadata
    - include: method
    - include: variable
    - include: modifiers
    - include: new-expr
    - include: for-loop
    - include: keywords
    - include: arrow-function
    - include: method-call
    - include: enum-constructor-call
    - include: punctuation-braces
    - include: macro-reification
    - include: operators
    - include: operator-assignment
    - include: punctuation-terminator
    - include: punctuation-comma
    - include: punctuation-accessor
    - include: identifiers
  class:
    - match: (?=class)
      push:
        - meta_scope: meta.class.hx
        - match: '(?<=\})|(;)'
          captures:
            1: punctuation.terminator.hx
          pop: true
        - include: class-name
        - include: class-name-post
        - include: class-block
  class-block:
    - match: '(?<=\{)'
      push:
        - meta_scope: meta.block.hx
        - match: '(\})'
          captures:
            1: punctuation.definition.block.end.hx
          pop: true
        - include: method
        - include: modifiers
        - include: variable
        - include: block
        - include: block-contents
  class-name:
    - match: \b(class)\b
      captures:
        1: storage.type.class.hx
      push:
        - meta_scope: meta.class.identifier.hx
        - match: '([_A-Za-z]\w*)'
          captures:
            1: entity.name.type.class.hx
          pop: true
        - include: global
  class-name-post:
    - match: (?<=\w)
      push:
        - match: '([\{;])'
          captures:
            1: punctuation.definition.block.begin.hx
          pop: true
        - include: modifiers-inheritance
        - include: type
  comments:
    - match: /\*\*(?!/)
      captures:
        0: punctuation.definition.comment.hx
      push:
        - meta_scope: comment.block.documentation.hx
        - match: \*/
          captures:
            0: punctuation.definition.comment.hx
          pop: true
        - include: javadoc-tags
    - match: /\*
      captures:
        0: punctuation.definition.comment.hx
      push:
        - meta_scope: comment.block.hx
        - match: \*/
          captures:
            0: punctuation.definition.comment.hx
          pop: true
        - include: javadoc-tags
    - match: (//).*$\n?
      scope: comment.line.double-slash.hx
      captures:
        1: punctuation.definition.comment.hx
  conditional-compilation:
    - match: '((#(if|elseif))[\s!]+([a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*)(?=\s|/\*|//))'
      captures:
        0: punctuation.definition.tag
    - match: '((#(if|elseif))[\s!]*)(?=\()'
      captures:
        0: punctuation.definition.tag
      push:
        - meta_scope: punctuation.definition.tag
        - match: (?<=\)|\n)
          captures:
            0: punctuation.definition.tag
          pop: true
        - include: conditional-compilation-parens
    - match: (#(end|else|error|line))
      scope: punctuation.definition.tag
    - match: '(#([a-zA-Z0-9_]*))\s'
      scope: punctuation.definition.tag
  conditional-compilation-parens:
    - match: \(
      push:
        - match: \)
          pop: true
        - include: conditional-compilation-parens
  constant-name:
    - match: '\b([_A-Z][_A-Z0-9]*)\b'
      scope: variable.other.hx
  constants:
    - match: \b(true|false|null)\b
      scope: constant.language.hx
    - match: '\b(0(x|X)[0-9a-fA-F]*)\b'
      scope: constant.numeric.hex.hx
    - match: |-
        (?x)
        (?<!\$)(?:
          (?:\b[0-9]+(\.)[0-9]+[eE][+-]?[0-9]+\b)| # 1.1E+3
          (?:\b[0-9]+(\.)[eE][+-]?[0-9]+\b)|       # 1.E+3
          (?:\B(\.)[0-9]+[eE][+-]?[0-9]+\b)|       # .1E+3
          (?:\b[0-9]+[eE][+-]?[0-9]+\b)|           # 1E+3
          (?:\b[0-9]+(\.)[0-9]+\b)|                # 1.1
          (?:\b[0-9]+(\.)(?!\.)\B)|                # 1.
          (?:\B(\.)[0-9]+\b)|                      # .1
          (?:\b[0-9]+\b)                           # 1
        )(?!\$)
      captures:
        0: constant.numeric.decimal.hx
        1: meta.delimiter.decimal.period.hx
        2: meta.delimiter.decimal.period.hx
        3: meta.delimiter.decimal.period.hx
        4: meta.delimiter.decimal.period.hx
        5: meta.delimiter.decimal.period.hx
        6: meta.delimiter.decimal.period.hx
  enum:
    - match: '(?=enum\s+[A-Z])'
      push:
        - meta_scope: meta.enum.hx
        - match: '(?<=\})|(;)'
          captures:
            1: punctuation.terminator.hx
          pop: true
        - include: enum-name
        - include: enum-name-post
        - include: enum-block
  enum-block:
    - match: '(?<=\{)'
      push:
        - meta_scope: meta.block.hx
        - match: '(\})'
          captures:
            1: punctuation.definition.block.end.hx
          pop: true
        - include: global
        - include: metadata
        - include: parameters
        - include: identifiers
  enum-constructor-call:
    - match: '\b(?<!\.)((_*[a-z]\w*\.)*)(_*[A-Z]\w*)(?:(\.)(_*[A-Z]\w*[a-z]\w*))*\s*(\()'
      captures:
        1: support.package.hx
        3: entity.name.type.hx
        4: support.package.hx
        5: entity.name.type.hx
        6: meta.brace.round.hx
      push:
        - match: (\))
          captures:
            1: meta.brace.round.hx
          pop: true
        - include: block
        - include: block-contents
  enum-name:
    - match: \b(enum)\b
      captures:
        1: storage.type.class.hx
      push:
        - match: '([_A-Za-z]\w*)'
          captures:
            1: entity.name.type.class.hx
          pop: true
        - include: global
  enum-name-post:
    - match: (?<=\w)
      push:
        - match: '([\{;])'
          captures:
            1: punctuation.definition.block.begin.hx
          pop: true
        - include: type
  for-loop:
    - match: \b(for)\b\s*(\()
      captures:
        1: keyword.control.flow-control.hx
        2: meta.brace.round.hx
      push:
        - match: (\))
          captures:
            1: meta.brace.round.hx
          pop: true
        - match: \b(in)\b
          scope: keyword.other.in.hx
        - include: block
        - include: block-contents
  function-type:
    - match: \(
      captures:
        0: punctuation.definition.parameters.begin.hx
      push:
        - match: \)
          captures:
            0: punctuation.definition.parameters.end.hx
          pop: true
        - include: function-type-parameter
  function-type-parameter:
    - match: (?<=\(|,)
      push:
        - match: (?=\)|,)
          pop: true
        - include: global
        - include: metadata
        - include: operator-optional
        - include: punctuation-comma
        - include: function-type-parameter-name
        - include: function-type-parameter-type-hint
        - include: parameter-assign
        - include: type
        - include: global
  function-type-parameter-name:
    - match: '([_a-zA-Z]\w*)(?=\s*:)'
      captures:
        1: variable.parameter.hx
  function-type-parameter-type-hint:
    - match: ":"
      captures:
        0: keyword.operator.type.annotation.hx
      push:
        - match: (?=\)|,|=)
          pop: true
        - include: type
  global:
    - include: comments
    - include: conditional-compilation
  identifier-name:
    - match: '\b([_A-Za-z]\w*)\b'
      scope: variable.other.hx
  identifiers:
    - include: constant-name
    - include: type-name
    - include: identifier-name
  import:
    - match: import\b
      captures:
        0: keyword.control.import.hx
      push:
        - match: $|(;)
          captures:
            1: punctuation.terminator.hx
          pop: true
        - include: type-path
        - match: \b(as)\b
          scope: keyword.control.as.hx
        - match: \b(in)\b
          scope: keyword.control.in.hx
        - match: \*
          scope: constant.language.import-all.hx
        - match: '\b([_A-Za-z]\w*)\b(?=\s*(as|in|$|(;)))'
          scope: variable.other.hxt
        - include: type-path-package-name
  interface:
    - match: (?=interface)
      push:
        - meta_scope: meta.interface.hx
        - match: '(?<=\})|(;)'
          captures:
            1: punctuation.terminator.hx
          pop: true
        - include: interface-name
        - include: interface-name-post
        - include: interface-block
  interface-block:
    - match: '(?<=\{)'
      push:
        - meta_scope: meta.block.hx
        - match: '(\})'
          captures:
            1: punctuation.definition.block.end.hx
          pop: true
        - include: method
        - include: variable
        - include: block
        - include: block-contents
  interface-name:
    - match: \b(interface)\b
      captures:
        1: storage.type.class.hx
      push:
        - match: '([_A-Za-z]\w*)'
          captures:
            1: entity.name.type.class.hx
          pop: true
        - include: global
  interface-name-post:
    - match: (?<=\w)
      push:
        - match: '([\{;])'
          captures:
            1: punctuation.definition.block.begin.hx
          pop: true
        - include: global
        - include: modifiers-inheritance
        - include: type
  javadoc-tags:
    - match: '(@(?:param|exception|throws|event))\s+([_A-Za-z]\w*)\s+'
      captures:
        1: storage.type.class.javadoc
        2: variable.other.javadoc
    - match: '(@since)\s+([\w\.-]+)\s+'
      captures:
        1: storage.type.class.javadoc
        2: constant.numeric.javadoc
    - match: "@(param|exception|throws|deprecated|returns?|since|default|see|event)"
      captures:
        0: storage.type.class.javadoc
  keywords:
    - match: (?<=trace|$type|if|while|for|super)\s*(\()
      captures:
        2: meta.brace.round.hx
      push:
        - match: \)
          captures:
            0: meta.brace.round.hx
          pop: true
        - include: block-contents
    - match: (?<=catch)\s*(\()
      captures:
        2: meta.brace.round.hx
      push:
        - match: \)
          captures:
            0: meta.brace.round.hx
          pop: true
        - include: block-contents
        - include: type-check
    - match: (?<=cast)\s*(\()
      captures:
        2: meta.brace.round.hx
      push:
        - match: \)
          captures:
            0: meta.brace.round.hx
          pop: true
        - match: (?=,)
          push:
            - match: (?=\))
              pop: true
            - include: type
        - include: block-contents
    - match: \b(try|catch|throw)\b
      scope: keyword.control.catch-exception.hx
    - match: \b(case|default)\b
      captures:
        1: keyword.control.flow-control.hx
      push:
        - match: ":|(?=if)|$"
          pop: true
        - include: global
        - include: metadata
        - match: '\b(var|final)\b\s*([_a-zA-Z]\w*)\b'
          captures:
            1: storage.type.variable.hx
            2: variable.other.hx
        - include: array
        - include: constants
        - include: strings
        - match: \(
          scope: meta.brace.round.hx
        - match: \)
          scope: meta.brace.round.hx
        - include: macro-reification
        - match: "=>"
          scope: keyword.operator.extractor.hx
        - include: operator-assignment
        - include: punctuation-comma
        - include: keywords
        - include: method-call
        - include: identifiers
    - match: \b(if|else|return|do|while|for|break|continue|switch|case|default)\b
      scope: keyword.control.flow-control.hx
    - match: \b(cast|untyped)\b
      scope: keyword.other.untyped.hx
    - match: \btrace\b
      scope: keyword.other.trace.hx
    - match: \$type\b
      scope: keyword.other.type.hx
    - match: \__(global|this)__\b
      scope: keyword.other.untyped-property.hx
    - match: \b(this|super)\b
      scope: variable.language.hx
    - match: \bnew\b
      scope: keyword.operator.new.hx
    - match: \b(abstract|class|enum|interface|typedef)\b
      scope: storage.type.hx
    - match: "->"
      scope: storage.type.function.arrow.hx
    - include: modifiers
    - include: modifiers-inheritance
  keywords-accessor:
    - match: \b(default|get|set|dynamic|never|null)\b
      scope: storage.type.property.hx
  macro-reification:
    - match: '(\$)([eabipv])\{'
      captures:
        1: punctuation.definition.reification.hx
        2: keyword.reification.hx
    - match: '((\$)([a-zA-Z]*))'
      captures:
        2: punctuation.definition.reification.hx
        3: variable.reification.hx
  metadata:
    - match: (@)(:(abi|abstract|access|allow|analyzer|annotation|arrayAccess|astSource|autoBuild|bind|bitmap|bridgeProperties|build|buildXml|bypassAccessor|callable|classCode|commutative|compilerGenerated|const|coreApi|coreType|cppFileCode|cppInclude|cppNamespaceCode|cs.assemblyMeta|cs.assemblyStrict|cs.using|dce|debug|decl|delegate|depend|deprecated|eager|enum|event|expose|extern|file|fileXml|final|fixed|flash.property|font|forward.new|forward.variance|forward|forwardStatics|from|functionCode|functionTailCode|generic|genericBuild|genericClassPerMethod|getter|hack|headerClassCode|headerCode|headerInclude|headerNamespaceCode|hlNative|hxGen|ifFeature|include|inheritDoc|inline|internal|isVar|java.native|javaCanonical|jsRequire|jvm.synthetic|keep|keepInit|keepSub|luaDotMethod|luaRequire|macro|markup|mergeBlock|multiReturn|multiType|native|nativeChildren|nativeGen|nativeProperty|nativeStaticExtension|noClosure|noCompletion|noDebug|noDoc|noImportGlobal|noPrivateAccess|noStack|noUsing|nonVirtual|notNull|nullSafety|objc|objcProtocol|op|optional|overload|persistent|phpClassConst|phpGlobal|phpMagic|phpNoConstructor|pos|private|privateAccess|property|protected|publicFields|pure|pythonImport|readOnly|remove|require|resolve|rtti|runtimeValue|scalar|selfCall|semantics|setter|sound|sourceFile|stackOnly|strict|struct|structAccess|structInit|suppressWarnings|templatedCall|throws|to|transient|transitive|unifyMinDynamic|unreflective|unsafe|using|void|volatile)\b)\s*(\()
      captures:
        1: punctuation.metadata.hx
        2: storage.modifier.metadata.hx
        3: meta.brace.round.hx
      push:
        - match: \)
          captures:
            0: meta.brace.round.hx
          pop: true
        - include: block-contents
    - match: ((@)(:(abi|abstract|access|allow|analyzer|annotation|arrayAccess|astSource|autoBuild|bind|bitmap|bridgeProperties|build|buildXml|bypassAccessor|callable|classCode|commutative|compilerGenerated|const|coreApi|coreType|cppFileCode|cppInclude|cppNamespaceCode|cs.assemblyMeta|cs.assemblyStrict|cs.using|dce|debug|decl|delegate|depend|deprecated|eager|enum|event|expose|extern|file|fileXml|final|fixed|flash.property|font|forward.new|forward.variance|forward|forwardStatics|from|functionCode|functionTailCode|generic|genericBuild|genericClassPerMethod|getter|hack|headerClassCode|headerCode|headerInclude|headerNamespaceCode|hlNative|hxGen|ifFeature|include|inheritDoc|inline|internal|isVar|java.native|javaCanonical|jsRequire|jvm.synthetic|keep|keepInit|keepSub|luaDotMethod|luaRequire|macro|markup|mergeBlock|multiReturn|multiType|native|nativeChildren|nativeGen|nativeProperty|nativeStaticExtension|noClosure|noCompletion|noDebug|noDoc|noImportGlobal|noPrivateAccess|noStack|noUsing|nonVirtual|notNull|nullSafety|objc|objcProtocol|op|optional|overload|persistent|phpClassConst|phpGlobal|phpMagic|phpNoConstructor|pos|private|privateAccess|property|protected|publicFields|pure|pythonImport|readOnly|remove|require|resolve|rtti|runtimeValue|scalar|selfCall|semantics|setter|sound|sourceFile|stackOnly|strict|struct|structAccess|structInit|suppressWarnings|templatedCall|throws|to|transient|transitive|unifyMinDynamic|unreflective|unsafe|using|void|volatile)\b))
      captures:
        2: punctuation.metadata.hx
        3: storage.modifier.metadata.hx
    - match: '(@)(:?[a-zA-Z_]*)\s*(\()'
      captures:
        1: punctuation.metadata.hx
        2: variable.metadata.hx
        3: meta.brace.round.hx
      push:
        - match: \)
          captures:
            0: meta.brace.round.hx
          pop: true
        - include: block-contents
    - match: '(@)(:?)([a-zA-Z_]*(\.))*([a-zA-Z_]*)?'
      captures:
        1: punctuation.metadata.hx
        2: variable.metadata.hx
        3: variable.metadata.hx
        4: punctuation.accessor.hx
        5: variable.metadata.hx
  method:
    - match: (?=\bfunction\b)
      push:
        - meta_scope: meta.method.hx
        - match: '(?<=[\};])'
          pop: true
        - include: macro-reification
        - include: method-name
        - include: method-name-post
        - include: method-block
  method-block:
    - match: '(?<=\{)'
      captures:
        1: punctuation.definition.block.begin.hx
      push:
        - meta_scope: meta.method.block.hx
        - match: '(\})'
          captures:
            1: punctuation.definition.block.end.hx
          pop: true
        - include: block
        - include: block-contents
  method-call:
    - match: '\b(?:(__(?:addressOf|as|call|checked|cpp|cs|define_feature|delete|feature|field|fixed|foreach|forin|has_next|hkeys|in|int|is|java|js|keys|lock|lua|lua_table|new|php|physeq|prefix|ptr|resources|rethrow|set|setfield|sizeof|type|typeof|unprotect|unsafe|valueOf|var|vector|vmem_get|vmem_set|vmem_sign|instanceof|strict_eq|strict_neq)__)|([_a-z]\w*))\s*(\()'
      captures:
        1: keyword.other.untyped-function.hx
        2: entity.name.function.hx
        3: meta.brace.round.hx
      push:
        - match: (\))
          captures:
            1: meta.brace.round.hx
          pop: true
        - include: block
        - include: block-contents
  method-name:
    - match: '\b(function)\b\s*\b(?:(new)|([_A-Za-z]\w*))?\b'
      captures:
        1: storage.type.function.hx
        2: storage.type.hx
        3: entity.name.function.hx
      push:
        - match: (?=$|\()
          pop: true
        - include: macro-reification
        - include: type-parameters
  method-name-post:
    - match: '(?<=[\w\s>])'
      push:
        - match: '(\{)|(;)'
          captures:
            1: punctuation.definition.block.begin.hx
            2: punctuation.terminator.hx
          pop: true
        - include: parameters
        - include: method-return-type-hint
        - include: block
        - include: block-contents
  method-return-type-hint:
    - match: (?<=\))\s*(:)
      captures:
        1: keyword.operator.type.annotation.hx
      push:
        - match: '(?=\{|;|[a-z0-9])'
          pop: true
        - include: type
  modifiers:
    - match: \b(enum)\b
      scope: storage.type.class
    - match: \b(public|private|static|dynamic|inline|macro|extern|override|overload|abstract)\b
      scope: storage.modifier.hx
    - match: \b(final)\b(?=\s+(public|private|static|dynamic|inline|macro|extern|override|overload|abstract|function))
      scope: storage.modifier.hx
  modifiers-inheritance:
    - match: \b(implements|extends)\b
      scope: storage.modifier.hx
  new-expr:
    - match: (?<!\.)\b(new)\b
      captures:
        1: keyword.operator.new.hx
      push:
        - meta_scope: new.expr.hx
        - match: (?=$|\()
          pop: true
        - include: type
  operator-assignment:
    - match: (=)
      scope: keyword.operator.assignment.hx
  operator-optional:
    - match: (\?)(?!\s)
      scope: keyword.operator.optional.hx
  operator-type-hint:
    - match: (:)
      scope: keyword.operator.type.annotation.hx
  operators:
    - match: (&&|\|\|)
      scope: keyword.operator.logical.hx
    - match: (~|&|\||\^|>>>|<<|>>)
      scope: keyword.operator.bitwise.hx
    - match: (==|!=|<=|>=|<|>)
      scope: keyword.operator.comparison.hx
    - match: (!)
      scope: keyword.operator.logical.hx
    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.hx
    - match: (\-|\+|\*|\/|%)
      scope: keyword.operator.arithmetic.hx
    - match: \.\.\.
      scope: keyword.operator.intiterator.hx
    - match: "=>"
      scope: keyword.operator.arrow.hx
    - match: \bis\b(?!\()
      scope: keyword.other.hx
    - match: \?
      captures:
        0: keyword.operator.ternary.hx
      push:
        - match: ":"
          captures:
            0: keyword.operator.ternary.hx
          pop: true
        - include: block-contents
  package:
    - match: package\b
      captures:
        0: keyword.other.package.hx
      push:
        - match: $|(;)
          captures:
            1: punctuation.terminator.hx
          pop: true
        - include: type-path
        - include: type-path-package-name
  parameter:
    - match: (?<=\(|,)
      push:
        - match: (?=\)(?!\s*->)|,)
          pop: true
        - include: parameter-name
        - include: parameter-type-hint
        - include: parameter-assign
        - include: punctuation-comma
        - include: global
  parameter-assign:
    - match: "="
      captures:
        0: keyword.operator.assignment.hx
      push:
        - match: (?=\)|,)
          pop: true
        - include: block
        - include: block-contents
  parameter-name:
    - match: (?<=\(|,)
      push:
        - match: '([_a-zA-Z]\w*)'
          captures:
            1: variable.parameter.hx
          pop: true
        - include: global
        - include: metadata
        - include: operator-optional
  parameter-type-hint:
    - match: ":"
      captures:
        0: keyword.operator.type.annotation.hx
      push:
        - match: (?=\)(?!\s*->)|,|=)
          pop: true
        - include: type
  parameters:
    - match: \(
      captures:
        0: punctuation.definition.parameters.begin.hx
      push:
        - meta_scope: meta.parameters.hx
        - match: \s*(\)(?!\s*->))
          captures:
            1: punctuation.definition.parameters.end.hx
          pop: true
        - include: parameter
  punctuation-accessor:
    - match: \.
      scope: punctuation.accessor.hx
  punctuation-braces:
    - match: \(
      captures:
        0: meta.brace.round.hx
      push:
        - match: \)
          captures:
            0: meta.brace.round.hx
          pop: true
        - include: keywords
        - include: block
        - include: block-contents
        - include: type-check
  punctuation-comma:
    - match: ","
      scope: punctuation.separator.comma.hx
  punctuation-terminator:
    - match: ;
      scope: punctuation.terminator.hx
  regex:
    - match: (~/)
      captures:
        1: punctuation.definition.string.begin.hx
      push:
        - meta_scope: string.regexp.hx
        - match: "(/)([gimsu]*)"
          captures:
            1: punctuation.definition.string.end.hx
            2: keyword.other.hx
          pop: true
        - include: regexp
  regex-character-class:
    - match: '\\[wWsSdDtrnvf]|\.'
      scope: constant.other.character-class.regexp
    - match: '\\([0-7]{3}|x\h\h|u\h\h\h\h)'
      scope: constant.character.numeric.regexp
    - match: '\\c[A-Z]'
      scope: constant.character.control.regexp
    - match: \\.
      scope: constant.character.escape.backslash.regexp
  regexp:
    - match: '\\[bB]|\^|\$'
      scope: keyword.control.anchor.regexp
    - match: '\\[1-9]\d*'
      scope: keyword.other.back-reference.regexp
    - match: '[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??'
      scope: keyword.operator.quantifier.regexp
    - match: \|
      scope: keyword.operator.or.regexp
    - match: (\()((\?=)|(\?!))
      captures:
        1: punctuation.definition.group.regexp
        2: punctuation.definition.group.assertion.regexp
        3: meta.assertion.look-ahead.regexp
        4: meta.assertion.negative-look-ahead.regexp
      push:
        - meta_scope: meta.group.assertion.regexp
        - match: (\))
          captures:
            1: punctuation.definition.group.regexp
          pop: true
        - include: regexp
    - match: \((\?:)?
      captures:
        0: punctuation.definition.group.regexp
        1: punctuation.definition.group.capture.regexp
      push:
        - meta_scope: meta.group.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.regexp
          pop: true
        - include: regexp
    - match: '(\[)(\^)?'
      captures:
        1: punctuation.definition.character-class.regexp
        2: keyword.operator.negation.regexp
      push:
        - meta_scope: constant.other.character-class.set.regexp
        - match: '(\])'
          captures:
            1: punctuation.definition.character-class.regexp
          pop: true
        - match: '(?:.|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))'
          scope: constant.other.character-class.range.regexp
          captures:
            1: constant.character.numeric.regexp
            2: constant.character.control.regexp
            3: constant.character.escape.backslash.regexp
            4: constant.character.numeric.regexp
            5: constant.character.control.regexp
            6: constant.character.escape.backslash.regexp
        - include: regex-character-class
    - include: regex-character-class
  string-escape-sequences:
    - match: '\\[0-3][0-9]{2}'
      scope: constant.character.escape.hx
    - match: '\\x[0-9A-Fa-f]{2}'
      scope: constant.character.escape.hx
    - match: '\\u[0-9]{4}'
      scope: constant.character.escape.hx
    - match: '\\u\{[0-9A-Fa-f]{1,}\}'
      scope: constant.character.escape.hx
    - match: '\\[nrt"''\\]'
      scope: constant.character.escape.hx
    - match: \\.
      scope: invalid.escape.sequence.hx
  strings:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.hx
      push:
        - meta_scope: string.quoted.double.hx
        - match: '"'
          captures:
            0: punctuation.definition.string.end.hx
          pop: true
        - include: string-escape-sequences
    - match: (')
      captures:
        0: string.quoted.single.hx
        1: punctuation.definition.string.begin.hx
      push:
        - match: (')
          captures:
            0: string.quoted.single.hx
            1: punctuation.definition.string.end.hx
          pop: true
        - match: \$(?=\$)
          captures:
            0: constant.character.escape.hx
          push:
            - meta_scope: string.quoted.single.hx
            - match: \$
              captures:
                0: constant.character.escape.hx
              pop: true
        - include: string-escape-sequences
        - match: '(\${)'
          captures:
            0: punctuation.definition.block.begin.hx
          push:
            - match: "(})"
              captures:
                0: punctuation.definition.block.end.hx
              pop: true
            - include: block-contents
        - match: '(\$)([_a-zA-Z]\w*)'
          captures:
            1: punctuation.definition.block.begin.hx
            2: variable.other.hx
        - match: ""
          scope: constant.character.escape.hx
        - match: .
          scope: string.quoted.single.hx
  type:
    - include: global
    - include: macro-reification
    - include: type-name
    - include: type-parameters
    - match: "->"
      scope: keyword.operator.type.function.hx
    - match: "&"
      scope: keyword.operator.type.intersection.hx
    - match: '\?(?=\s*[_A-Z])'
      scope: keyword.operator.optional
    - match: '\?(?!\s*[_A-Z])'
      scope: punctuation.definition.tag
    - match: '(\{)'
      captures:
        0: punctuation.definition.block.begin.hx
      push:
        - match: '(?<=\})'
          pop: true
        - include: typedef-block
    - include: function-type
  type-check:
    - match: (?<!macro)(?=:)
      push:
        - match: (?=\))
          pop: true
        - include: operator-type-hint
        - include: type
  type-name:
    - match: '\b(Any|Array|ArrayAccess|Bool|Class|Date|DateTools|Dynamic|Enum|EnumValue|EReg|Float|IMap|Int|IntIterator|Iterable|Iterator|KeyValueIterator|KeyValueIterable|Lambda|List|ListIterator|ListNode|Map|Math|Null|Reflect|Single|Std|String|StringBuf|StringTools|Sys|Type|UInt|UnicodeString|ValueType|Void|Xml|XmlType)(?:(\.)(_*[A-Z]\w*[a-z]\w*))*\b'
      captures:
        1: support.class.builtin.hx
        2: support.package.hx
        3: entity.name.type.hx
    - match: '\b(?<![^.]\.)((_*[a-z]\w*\.)*)(_*[A-Z]\w*)(?:(\.)(_*[A-Z]\w*[a-z]\w*))*\b'
      captures:
        1: support.package.hx
        3: entity.name.type.hx
        4: support.package.hx
        5: entity.name.type.hx
  type-parameter-constraint-new:
    - match: ":"
      scope: keyword.operator.type.annotation.hxt
  type-parameter-constraint-old:
    - match: (:)\s*(\()
      captures:
        1: keyword.operator.type.annotation.hx
        2: punctuation.definition.constraint.begin.hx
      push:
        - match: \)
          captures:
            0: punctuation.definition.constraint.end.hx
          pop: true
        - include: type
        - include: punctuation-comma
  type-parameters:
    - match: (<)
      captures:
        1: punctuation.definition.typeparameters.begin.hx
      push:
        - meta_scope: meta.type-parameters.hx
        - match: (?=$)|(>)
          captures:
            1: punctuation.definition.typeparameters.end.hx
          pop: true
        - include: type
        - include: type-parameter-constraint-old
        - include: type-parameter-constraint-new
        - include: global
        - include: regex
        - include: array
        - include: constants
        - include: strings
        - include: metadata
        - include: punctuation-comma
  type-path:
    - include: global
    - include: punctuation-accessor
    - include: type-path-type-name
  type-path-package-name:
    - match: '\b([_A-Za-z]\w*)\b'
      scope: support.package.hx
  type-path-type-name:
    - match: '\b(_*[A-Z]\w*)\b'
      scope: entity.name.type.hx
  typedef:
    - match: (?=typedef)
      push:
        - meta_scope: meta.typedef.hx
        - match: '(?<=\})|(;)'
          captures:
            1: punctuation.terminator.hx
          pop: true
        - include: typedef-name
        - include: typedef-name-post
        - include: typedef-block
  typedef-block:
    - match: '(?<=\{)'
      push:
        - meta_scope: meta.block.hx
        - match: '(\})'
          captures:
            1: punctuation.definition.block.end.hx
          pop: true
        - include: global
        - include: metadata
        - include: method
        - include: variable
        - include: modifiers
        - include: punctuation-comma
        - include: operator-optional
        - include: typedef-extension
        - include: typedef-simple-field-type-hint
        - include: identifier-name
        - include: strings
  typedef-extension:
    - match: ">"
      push:
        - match: ",|$"
          pop: true
        - include: type
  typedef-name:
    - match: \b(typedef)\b
      captures:
        1: storage.type.class.hx
      push:
        - match: '([_A-Za-z]\w*)'
          captures:
            1: entity.name.type.class.hx
          pop: true
        - include: global
  typedef-name-post:
    - match: (?<=\w)
      push:
        - match: '(\{)|(?=;)'
          captures:
            1: punctuation.definition.block.begin.hx
          pop: true
        - include: global
        - include: operator-assignment
        - include: type
  typedef-simple-field-type-hint:
    - match: ":"
      captures:
        0: keyword.operator.type.annotation.hx
      push:
        - match: '(?=\}|,|;)'
          pop: true
        - include: type
  using:
    - match: using\b
      captures:
        0: keyword.other.using.hx
      push:
        - match: $|(;)
          captures:
            1: punctuation.terminator.hx
          pop: true
        - include: type-path
        - include: type-path-package-name
  variable:
    - match: (?=\b(var|final)\b)
      push:
        - match: (?=$)|(;)
          captures:
            1: punctuation.terminator.hx
          pop: true
        - include: variable-name
        - include: variable-name-next
        - include: variable-assign
        - include: variable-name-post
  variable-accessors:
    - match: \(
      captures:
        0: punctuation.definition.parameters.begin.hx
      push:
        - meta_scope: meta.parameters.hx
        - match: \)
          captures:
            0: punctuation.definition.parameters.end.hx
          pop: true
        - include: global
        - include: keywords-accessor
        - include: accessor-method
        - include: punctuation-comma
  variable-assign:
    - match: "="
      captures:
        0: keyword.operator.assignment.hx
      push:
        - match: (?=;|,)
          pop: true
        - include: block
        - include: block-contents
  variable-name:
    - match: \b(var|final)\b
      captures:
        1: storage.type.variable.hx
      push:
        - match: '(?=$)|([_a-zA-Z]\w*)'
          captures:
            1: variable.other.hx
          pop: true
        - include: operator-optional
  variable-name-next:
    - match: ","
      captures:
        0: punctuation.separator.comma.hx
      push:
        - match: '([_a-zA-Z]\w*)'
          captures:
            1: variable.other.hx
          pop: true
        - include: global
  variable-name-post:
    - match: (?<=\w)
      push:
        - match: (?=;)|(?==)
          pop: true
        - include: variable-accessors
        - include: variable-type-hint
        - include: block-contents
  variable-type-hint:
    - match: ":"
      captures:
        0: keyword.operator.type.annotation.hx
      push:
        - match: (?=$|;|,|=)
          pop: true
        - include: type
